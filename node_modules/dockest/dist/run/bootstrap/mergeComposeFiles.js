"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const Errors_1 = require("../../Errors");
const execaWrapper_1 = require("../../utils/execaWrapper");
exports.mergeComposeFiles = async ({ composeFile, nodeProcess = process, }) => {
    const composeFiles = [];
    if (Array.isArray(composeFile)) {
        composeFiles.push(...composeFile);
    }
    else {
        composeFiles.push(composeFile);
    }
    const command = `${composeFiles.reduce((acc, curr) => (acc += ` -f ${path_1.default.join(nodeProcess.cwd(), curr)}`), 'docker-compose')} config`;
    const { stderr, exitCode, stdout } = await execaWrapper_1.execaWrapper(command, {
        execaOpts: { reject: false },
        logStdout: true,
    });
    if (exitCode !== 0) {
        throw new Errors_1.DockestError('Invalid Compose file(s)', {
            error: stderr,
        });
    }
    return {
        mergedComposeFiles: stdout,
    };
};
//# sourceMappingURL=mergeComposeFiles.js.map