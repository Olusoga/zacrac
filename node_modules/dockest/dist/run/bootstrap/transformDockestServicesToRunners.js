"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const createDockerServiceEventStream_1 = require("./createDockerServiceEventStream");
const Errors_1 = require("../../Errors");
const Logger_1 = require("../../Logger");
exports.transformDockestServicesToRunners = ({ dockerComposeFile, dockestServices, runMode, dockerEventEmitter, }) => {
    const createRunner = (dockestService) => {
        const { commands = [], dependents = [], readinessCheck = () => Promise.resolve(), serviceName } = dockestService;
        const dockerComposeFileService = dockerComposeFile.services[serviceName];
        if (!dockerComposeFileService) {
            throw new Errors_1.ConfigurationError(`Unable to find compose service "${serviceName}", make sure that the serviceName corresponds with your Compose File's service`);
        }
        const runner = {
            commands,
            containerId: '',
            dependents: dependents.map(createRunner),
            dockerComposeFileService,
            dockerEventStream$: createDockerServiceEventStream_1.createDockerServiceEventStream(serviceName, dockerEventEmitter),
            logger: new Logger_1.Logger(serviceName),
            readinessCheck,
            serviceName,
        };
        if (runMode === 'docker-injected-host-socket') {
            runner.host = serviceName;
            runner.isBridgeNetworkMode = true;
        }
        return runner;
    };
    return dockestServices.reduce((acc, dockestService) => {
        acc[dockestService.serviceName] = createRunner(dockestService);
        return acc;
    }, {});
};
//# sourceMappingURL=transformDockestServicesToRunners.js.map