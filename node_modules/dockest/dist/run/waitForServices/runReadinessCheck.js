"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const createDefaultReadinessChecks_1 = require("../../utils/createDefaultReadinessChecks");
const Errors_1 = require("../../Errors");
const LOG_PREFIX = '[Run ReadinessCheck]';
const RETRY_COUNT = 30;
exports.runReadinessCheck = async ({ runner, runner: { containerId, dockerComposeFileService, readinessCheck, logger, dockerEventStream$ }, }) => rxjs_1.race(dockerEventStream$.pipe(operators_1.skipWhile(ev => ev.action !== 'die' && ev.action !== 'kill'), operators_1.map(event => {
    throw new Errors_1.DockestError('Container unexpectedly died.', { event });
})), rxjs_1.of(readinessCheck).pipe(operators_1.tap(() => logger.debug(`${LOG_PREFIX} Starting`)), operators_1.mergeMap(readinessCheck => rxjs_1.from(readinessCheck({
    containerId,
    defaultReadinessChecks: createDefaultReadinessChecks_1.createDefaultReadinessChecks({ runner }),
    dockerComposeFileService,
    logger,
    dockerEventStream$,
}))), operators_1.retryWhen(errors => {
    let retries = 0;
    return errors.pipe(operators_1.tap(() => {
        retries = retries + 1;
        logger.debug(`${LOG_PREFIX} Timeout in ${RETRY_COUNT - retries}s`);
    }), operators_1.takeWhile(() => {
        if (retries < RETRY_COUNT)
            return true;
        throw new Errors_1.DockestError(`${LOG_PREFIX} Timed out`, { runner });
    }), operators_1.delay(1000));
}), operators_1.tap(() => {
    logger.info(`${LOG_PREFIX} Success`, { success: true });
}))).toPromise();
//# sourceMappingURL=runReadinessCheck.js.map