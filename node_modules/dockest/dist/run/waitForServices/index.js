"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const checkConnection_1 = require("./checkConnection");
const runReadinessCheck_1 = require("./runReadinessCheck");
const dockerComposeUp_1 = require("./dockerComposeUp");
const fixRunnerHostAccessOnLinux_1 = require("./fixRunnerHostAccessOnLinux");
const resolveContainerId_1 = require("./resolveContainerId");
const runRunnerCommands_1 = require("./runRunnerCommands");
const createBridgeNetwork_1 = require("../../utils/network/createBridgeNetwork");
const constants_1 = require("../../constants");
const joinBridgeNetwork_1 = require("../../utils/network/joinBridgeNetwork");
const bridgeNetworkExists_1 = require("../../utils/network/bridgeNetworkExists");
const LOG_PREFIX = '[Setup]';
exports.waitForServices = async ({ composeOpts, hostname, runMode, mutables: { runners }, runInBand, skipCheckConnection, }) => {
    const setupPromises = [];
    const waitForRunner = async ({ runner, runner: { isBridgeNetworkMode, dependents, serviceName }, }) => {
        runner.logger.debug(`${LOG_PREFIX} Initiating...`);
        await dockerComposeUp_1.dockerComposeUp({ composeOpts, serviceName });
        await resolveContainerId_1.resolveContainerId({ runner });
        if (isBridgeNetworkMode) {
            await joinBridgeNetwork_1.joinBridgeNetwork({ containerId: runner.containerId, alias: serviceName });
        }
        if (process.platform === 'linux' && !isBridgeNetworkMode) {
            await fixRunnerHostAccessOnLinux_1.fixRunnerHostAccessOnLinux(runner);
        }
        if (skipCheckConnection) {
            runner.logger.debug(`${LOG_PREFIX} Skip connection check.`);
        }
        else {
            await checkConnection_1.checkConnection({ runner });
        }
        await runReadinessCheck_1.runReadinessCheck({ runner });
        await runRunnerCommands_1.runRunnerCommands({ runner });
        runner.logger.info(`${LOG_PREFIX} Success`, { success: true, endingNewLines: 1 });
        for (const dependant of dependents) {
            await waitForRunner({ runner: dependant });
        }
    };
    if (runMode === 'docker-injected-host-socket') {
        if (!(await bridgeNetworkExists_1.bridgeNetworkExists())) {
            await createBridgeNetwork_1.createBridgeNetwork();
        }
        await joinBridgeNetwork_1.joinBridgeNetwork({ containerId: hostname, alias: constants_1.DOCKEST_HOST_ADDRESS });
    }
    for (const runner of Object.values(runners)) {
        if (runInBand) {
            await waitForRunner({ runner });
        }
        else {
            setupPromises.push(waitForRunner({ runner }));
        }
    }
    await Promise.all(setupPromises);
};
//# sourceMappingURL=index.js.map