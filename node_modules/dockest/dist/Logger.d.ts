interface LoggerPayload {
    data?: {
        [key: string]: any;
    };
    endingNewLines?: number;
    service?: string;
    startingNewLines?: number;
    success?: boolean;
    symbol?: string;
}
export declare type LogMethod = (message: string, payload?: LoggerPayload) => void;
export declare class Logger {
    static logLevel: number;
    static error: LogMethod;
    static warn: LogMethod;
    static info: LogMethod;
    static debug: LogMethod;
    static replacePrevLine: ({ message, isLast }: {
        message: string;
        isLast?: boolean | undefined;
    }) => void;
    static measurePerformance: (perfStart: number, opts?: {
        logPrefix?: string | undefined;
    }) => void;
    private serviceName;
    private runnerSymbol;
    constructor(serviceName?: string);
    setRunnerSymbol: (symbol: string) => void;
    error: LogMethod;
    warn: LogMethod;
    info: LogMethod;
    debug: LogMethod;
}
export {};
