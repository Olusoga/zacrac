"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Errors_1 = require("./Errors");
const bootstrap_1 = require("./run/bootstrap");
const debugMode_1 = require("./run/debugMode");
const getOpts_1 = require("./utils/getOpts");
const Logger_1 = require("./Logger");
const constants_1 = require("./constants");
const runJest_1 = require("./run/runJest");
const teardown_1 = require("./run/teardown");
const waitForServices_1 = require("./run/waitForServices");
var execaWrapper_1 = require("./utils/execaWrapper");
exports.execa = execaWrapper_1.execaWrapper;
var constants_2 = require("./constants");
exports.logLevel = constants_2.LOG_LEVEL;
var sleep_1 = require("./utils/sleep");
exports.sleep = sleep_1.sleep;
var sleepWithLog_1 = require("./utils/sleepWithLog");
exports.sleepWithLog = sleepWithLog_1.sleepWithLog;
// export { createContainerIsHealthyHealthcheck } from './utils/createContainerIsHealthyHealthcheck'
class Dockest {
    constructor(opts) {
        this.run = async (dockestServices) => {
            this.config.perfStart = Date.now();
            const { composeFile, composeOpts, debug, dumpErrors, exitHandler, hostname, runMode, jestLib, jestOpts, mutables, perfStart, runInBand, skipCheckConnection, } = this.config;
            await bootstrap_1.bootstrap({
                composeFile,
                dockestServices,
                dumpErrors,
                exitHandler,
                runMode,
                mutables,
                perfStart,
            });
            await waitForServices_1.waitForServices({ composeOpts, mutables, hostname, runMode, runInBand, skipCheckConnection });
            await debugMode_1.debugMode({ debug, mutables });
            const { success } = await runJest_1.runJest({ jestLib, jestOpts, mutables });
            await teardown_1.teardown({ hostname, runMode, mutables, perfStart });
            success ? process.exit(0) : process.exit(1);
        };
        this.config = getOpts_1.getOpts(opts);
        Logger_1.Logger.logLevel = this.config.logLevel;
        Errors_1.BaseError.DockestConfig = this.config;
        if (this.config.jestLib.getVersion() < constants_1.MINIMUM_JEST_VERSION) {
            throw new Errors_1.ConfigurationError(`Outdated Jest version (${this.config.jestLib.getVersion()}). Upgrade to at least ${constants_1.MINIMUM_JEST_VERSION}`);
        }
    }
}
exports.Dockest = Dockest;
//# sourceMappingURL=index.js.map