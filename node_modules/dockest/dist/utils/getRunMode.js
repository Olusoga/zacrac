"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_docker_1 = __importDefault(require("is-docker")); // eslint-disable-line import/default
const execaWrapper_1 = require("./execaWrapper");
const Logger_1 = require("../Logger");
const Errors_1 = require("../Errors");
exports.getRunMode = () => {
    let mode = null;
    if (is_docker_1.default()) {
        const { stdout: result } = execaWrapper_1.execaWrapper(`
      sh -c '
        v=$(mount | grep "/run/docker.sock"); \\
        if [ -n "$v" ]; \\
        then \\
          echo "injected-socket"; \\
        elif [ -S /var/run/docker.sock ]; \\
        then \\
          echo "local-socket"; \\
        else \\
          echo "no-socket"; \\
        fi \\
      '
    `);
        if (result === 'local-socket') {
            mode = 'docker-local-socket';
        }
        else if (result === 'injected-socket') {
            mode = 'docker-injected-host-socket';
        }
        else {
            throw new Errors_1.DockestError(`Resolved invalid mode: '${result}'.`);
        }
    }
    else {
        mode = 'host';
    }
    Logger_1.Logger.debug(`Run dockest in '${mode}' mode.`);
    return mode;
};
//# sourceMappingURL=getRunMode.js.map